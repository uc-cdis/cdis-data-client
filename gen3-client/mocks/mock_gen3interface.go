// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uc-cdis/gen3-client/gen3-client/g3cmd (interfaces: Gen3Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	gomock "github.com/golang/mock/gomock"
	jwt "github.com/uc-cdis/gen3-client/gen3-client/jwt"
	http "net/http"
	reflect "reflect"
)

// MockGen3Interface is a mock of Gen3Interface interface
type MockGen3Interface struct {
	ctrl     *gomock.Controller
	recorder *MockGen3InterfaceMockRecorder
}

// MockGen3InterfaceMockRecorder is the mock recorder for MockGen3Interface
type MockGen3InterfaceMockRecorder struct {
	mock *MockGen3Interface
}

// NewMockGen3Interface creates a new mock instance
func NewMockGen3Interface(ctrl *gomock.Controller) *MockGen3Interface {
	mock := &MockGen3Interface{ctrl: ctrl}
	mock.recorder = &MockGen3InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGen3Interface) EXPECT() *MockGen3InterfaceMockRecorder {
	return m.recorder
}

// CheckForShepherdAPI mocks base method
func (m *MockGen3Interface) CheckForShepherdAPI(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForShepherdAPI", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForShepherdAPI indicates an expected call of CheckForShepherdAPI
func (mr *MockGen3InterfaceMockRecorder) CheckForShepherdAPI(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForShepherdAPI", reflect.TypeOf((*MockGen3Interface)(nil).CheckForShepherdAPI), arg0)
}

// DoRequestWithSignedHeader mocks base method
func (m *MockGen3Interface) DoRequestWithSignedHeader(arg0, arg1, arg2, arg3 string, arg4 []byte) (jwt.JsonMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequestWithSignedHeader", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(jwt.JsonMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRequestWithSignedHeader indicates an expected call of DoRequestWithSignedHeader
func (mr *MockGen3InterfaceMockRecorder) DoRequestWithSignedHeader(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequestWithSignedHeader", reflect.TypeOf((*MockGen3Interface)(nil).DoRequestWithSignedHeader), arg0, arg1, arg2, arg3, arg4)
}

// GetResponse mocks base method
func (m *MockGen3Interface) GetResponse(arg0, arg1, arg2, arg3, arg4 string, arg5 []byte) (string, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponse", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResponse indicates an expected call of GetResponse
func (mr *MockGen3InterfaceMockRecorder) GetResponse(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponse", reflect.TypeOf((*MockGen3Interface)(nil).GetResponse), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MakeARequest mocks base method
func (m *MockGen3Interface) MakeARequest(arg0, arg1, arg2, arg3 string, arg4 map[string]string, arg5 *bytes.Buffer) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeARequest", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeARequest indicates an expected call of MakeARequest
func (mr *MockGen3InterfaceMockRecorder) MakeARequest(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeARequest", reflect.TypeOf((*MockGen3Interface)(nil).MakeARequest), arg0, arg1, arg2, arg3, arg4, arg5)
}
